// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSaverClient is the client API for FileSaver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSaverClient interface {
	Save(ctx context.Context, opts ...grpc.CallOption) (FileSaver_SaveClient, error)
}

type fileSaverClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSaverClient(cc grpc.ClientConnInterface) FileSaverClient {
	return &fileSaverClient{cc}
}

func (c *fileSaverClient) Save(ctx context.Context, opts ...grpc.CallOption) (FileSaver_SaveClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSaver_ServiceDesc.Streams[0], "/proto.FileSaver/Save", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSaverSaveClient{stream}
	return x, nil
}

type FileSaver_SaveClient interface {
	Send(*SaveFileRequest) error
	CloseAndRecv() (*SaveFileReply, error)
	grpc.ClientStream
}

type fileSaverSaveClient struct {
	grpc.ClientStream
}

func (x *fileSaverSaveClient) Send(m *SaveFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSaverSaveClient) CloseAndRecv() (*SaveFileReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSaverServer is the server API for FileSaver service.
// All implementations must embed UnimplementedFileSaverServer
// for forward compatibility
type FileSaverServer interface {
	Save(FileSaver_SaveServer) error
	mustEmbedUnimplementedFileSaverServer()
}

// UnimplementedFileSaverServer must be embedded to have forward compatible implementations.
type UnimplementedFileSaverServer struct {
}

func (UnimplementedFileSaverServer) Save(FileSaver_SaveServer) error {
	return status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedFileSaverServer) mustEmbedUnimplementedFileSaverServer() {}

// UnsafeFileSaverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSaverServer will
// result in compilation errors.
type UnsafeFileSaverServer interface {
	mustEmbedUnimplementedFileSaverServer()
}

func RegisterFileSaverServer(s grpc.ServiceRegistrar, srv FileSaverServer) {
	s.RegisterService(&FileSaver_ServiceDesc, srv)
}

func _FileSaver_Save_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSaverServer).Save(&fileSaverSaveServer{stream})
}

type FileSaver_SaveServer interface {
	SendAndClose(*SaveFileReply) error
	Recv() (*SaveFileRequest, error)
	grpc.ServerStream
}

type fileSaverSaveServer struct {
	grpc.ServerStream
}

func (x *fileSaverSaveServer) SendAndClose(m *SaveFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSaverSaveServer) Recv() (*SaveFileRequest, error) {
	m := new(SaveFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSaver_ServiceDesc is the grpc.ServiceDesc for FileSaver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSaver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileSaver",
	HandlerType: (*FileSaverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Save",
			Handler:       _FileSaver_Save_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fileGrpc.proto",
}
