// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package manager

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ExperimentType int64
const (
  ExperimentType_TIANJI ExperimentType = 0
  ExperimentType_SEARCH ExperimentType = 1
  ExperimentType_RECOMMEND ExperimentType = 2
  ExperimentType_ALGORITHM ExperimentType = 3
  ExperimentType_BMS ExperimentType = 4
)

func (p ExperimentType) String() string {
  switch p {
  case ExperimentType_TIANJI: return "TIANJI"
  case ExperimentType_SEARCH: return "SEARCH"
  case ExperimentType_RECOMMEND: return "RECOMMEND"
  case ExperimentType_ALGORITHM: return "ALGORITHM"
  case ExperimentType_BMS: return "BMS"
  }
  return "<UNSET>"
}

func ExperimentTypeFromString(s string) (ExperimentType, error) {
  switch s {
  case "TIANJI": return ExperimentType_TIANJI, nil 
  case "SEARCH": return ExperimentType_SEARCH, nil 
  case "RECOMMEND": return ExperimentType_RECOMMEND, nil 
  case "ALGORITHM": return ExperimentType_ALGORITHM, nil 
  case "BMS": return ExperimentType_BMS, nil 
  }
  return ExperimentType(0), fmt.Errorf("not a valid ExperimentType string")
}


func ExperimentTypePtr(v ExperimentType) *ExperimentType { return &v }

func (p ExperimentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentType) UnmarshalText(text []byte) error {
q, err := ExperimentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentType(v)
return nil
}

func (p * ExperimentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ExperimentPriority int64
const (
  ExperimentPriority_HIGH ExperimentPriority = 0
  ExperimentPriority_MEDIUM ExperimentPriority = 1
  ExperimentPriority_LOW ExperimentPriority = 2
)

func (p ExperimentPriority) String() string {
  switch p {
  case ExperimentPriority_HIGH: return "HIGH"
  case ExperimentPriority_MEDIUM: return "MEDIUM"
  case ExperimentPriority_LOW: return "LOW"
  }
  return "<UNSET>"
}

func ExperimentPriorityFromString(s string) (ExperimentPriority, error) {
  switch s {
  case "HIGH": return ExperimentPriority_HIGH, nil 
  case "MEDIUM": return ExperimentPriority_MEDIUM, nil 
  case "LOW": return ExperimentPriority_LOW, nil 
  }
  return ExperimentPriority(0), fmt.Errorf("not a valid ExperimentPriority string")
}


func ExperimentPriorityPtr(v ExperimentPriority) *ExperimentPriority { return &v }

func (p ExperimentPriority) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentPriority) UnmarshalText(text []byte) error {
q, err := ExperimentPriorityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentPriority) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentPriority(v)
return nil
}

func (p * ExperimentPriority) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ExperimentStatus int64
const (
  ExperimentStatus_CREATED ExperimentStatus = 0
  ExperimentStatus_RUNNING ExperimentStatus = 1
  ExperimentStatus_SUCCESS ExperimentStatus = 2
  ExperimentStatus_FAILED ExperimentStatus = 3
  ExperimentStatus_DELETED ExperimentStatus = 4
)

func (p ExperimentStatus) String() string {
  switch p {
  case ExperimentStatus_CREATED: return "CREATED"
  case ExperimentStatus_RUNNING: return "RUNNING"
  case ExperimentStatus_SUCCESS: return "SUCCESS"
  case ExperimentStatus_FAILED: return "FAILED"
  case ExperimentStatus_DELETED: return "DELETED"
  }
  return "<UNSET>"
}

func ExperimentStatusFromString(s string) (ExperimentStatus, error) {
  switch s {
  case "CREATED": return ExperimentStatus_CREATED, nil 
  case "RUNNING": return ExperimentStatus_RUNNING, nil 
  case "SUCCESS": return ExperimentStatus_SUCCESS, nil 
  case "FAILED": return ExperimentStatus_FAILED, nil 
  case "DELETED": return ExperimentStatus_DELETED, nil 
  }
  return ExperimentStatus(0), fmt.Errorf("not a valid ExperimentStatus string")
}


func ExperimentStatusPtr(v ExperimentStatus) *ExperimentStatus { return &v }

func (p ExperimentStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExperimentStatus) UnmarshalText(text []byte) error {
q, err := ExperimentStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExperimentStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExperimentStatus(v)
return nil
}

func (p * ExperimentStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TrialStatus int64
const (
  TrialStatus_CREATED TrialStatus = 0
  TrialStatus_RUNNING TrialStatus = 1
  TrialStatus_SUCCESS TrialStatus = 2
  TrialStatus_FAILED TrialStatus = 3
  TrialStatus_DELETED TrialStatus = 4
  TrialStatus_SUSPENDED TrialStatus = 5
)

func (p TrialStatus) String() string {
  switch p {
  case TrialStatus_CREATED: return "CREATED"
  case TrialStatus_RUNNING: return "RUNNING"
  case TrialStatus_SUCCESS: return "SUCCESS"
  case TrialStatus_FAILED: return "FAILED"
  case TrialStatus_DELETED: return "DELETED"
  case TrialStatus_SUSPENDED: return "SUSPENDED"
  }
  return "<UNSET>"
}

func TrialStatusFromString(s string) (TrialStatus, error) {
  switch s {
  case "CREATED": return TrialStatus_CREATED, nil 
  case "RUNNING": return TrialStatus_RUNNING, nil 
  case "SUCCESS": return TrialStatus_SUCCESS, nil 
  case "FAILED": return TrialStatus_FAILED, nil 
  case "DELETED": return TrialStatus_DELETED, nil 
  case "SUSPENDED": return TrialStatus_SUSPENDED, nil 
  }
  return TrialStatus(0), fmt.Errorf("not a valid TrialStatus string")
}


func TrialStatusPtr(v TrialStatus) *TrialStatus { return &v }

func (p TrialStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TrialStatus) UnmarshalText(text []byte) error {
q, err := TrialStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TrialStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TrialStatus(v)
return nil
}

func (p * TrialStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TopStandard int64
const (
  TopStandard_AUC TopStandard = 0
)

func (p TopStandard) String() string {
  switch p {
  case TopStandard_AUC: return "AUC"
  }
  return "<UNSET>"
}

func TopStandardFromString(s string) (TopStandard, error) {
  switch s {
  case "AUC": return TopStandard_AUC, nil 
  }
  return TopStandard(0), fmt.Errorf("not a valid TopStandard string")
}


func TopStandardPtr(v TopStandard) *TopStandard { return &v }

func (p TopStandard) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TopStandard) UnmarshalText(text []byte) error {
q, err := TopStandardFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TopStandard) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TopStandard(v)
return nil
}

func (p * TopStandard) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Order int64
const (
  Order_ASC Order = 0
  Order_DESC Order = 1
)

func (p Order) String() string {
  switch p {
  case Order_ASC: return "ASC"
  case Order_DESC: return "DESC"
  }
  return "<UNSET>"
}

func OrderFromString(s string) (Order, error) {
  switch s {
  case "ASC": return Order_ASC, nil 
  case "DESC": return Order_DESC, nil 
  }
  return Order(0), fmt.Errorf("not a valid Order string")
}


func OrderPtr(v Order) *Order { return &v }

func (p Order) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Order) UnmarshalText(text []byte) error {
q, err := OrderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Order) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Order(v)
return nil
}

func (p * Order) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TianjiType int64
const (
  TianjiType_train TianjiType = 0
  TianjiType_predict TianjiType = 1
)

func (p TianjiType) String() string {
  switch p {
  case TianjiType_train: return "train"
  case TianjiType_predict: return "predict"
  }
  return "<UNSET>"
}

func TianjiTypeFromString(s string) (TianjiType, error) {
  switch s {
  case "train": return TianjiType_train, nil 
  case "predict": return TianjiType_predict, nil 
  }
  return TianjiType(0), fmt.Errorf("not a valid TianjiType string")
}


func TianjiTypePtr(v TianjiType) *TianjiType { return &v }

func (p TianjiType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TianjiType) UnmarshalText(text []byte) error {
q, err := TianjiTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TianjiType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TianjiType(v)
return nil
}

func (p * TianjiType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TrialStatusUpdater int64
const (
  TrialStatusUpdater_controller TrialStatusUpdater = 0
  TrialStatusUpdater_collector TrialStatusUpdater = 1
)

func (p TrialStatusUpdater) String() string {
  switch p {
  case TrialStatusUpdater_controller: return "controller"
  case TrialStatusUpdater_collector: return "collector"
  }
  return "<UNSET>"
}

func TrialStatusUpdaterFromString(s string) (TrialStatusUpdater, error) {
  switch s {
  case "controller": return TrialStatusUpdater_controller, nil 
  case "collector": return TrialStatusUpdater_collector, nil 
  }
  return TrialStatusUpdater(0), fmt.Errorf("not a valid TrialStatusUpdater string")
}


func TrialStatusUpdaterPtr(v TrialStatusUpdater) *TrialStatusUpdater { return &v }

func (p TrialStatusUpdater) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TrialStatusUpdater) UnmarshalText(text []byte) error {
q, err := TrialStatusUpdaterFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TrialStatusUpdater) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TrialStatusUpdater(v)
return nil
}

func (p * TrialStatusUpdater) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Name
//  - Description
//  - ExperimentType
//  - ExperimentPriority
//  - TrialConcurrency
//  - MaxExecDuration
//  - MaxTrialNum
//  - MaxFailedTrialNum
//  - SearchSpace
//  - OptimizerConfig
//  - ModelPath
//  - TrialImage
//  - TrialCmd
//  - InitContainerImage
//  - InitContainerMountName
//  - InitContainerMountPath
//  - CPU
//  - RAM
//  - Gpu
//  - GpuRam
//  - DataSetPath
//  - CodePath
//  - TopNum
//  - TopStandard
//  - TopOrder
//  - TianjiProjectId
//  - TianjiUserId
//  - TianjiModelVersion
//  - TianjiType
//  - TianjiUsedModel
//  - TianjiDatasetBucket
//  - TianjiPredictID
//  - FkExperimentId
//  - MaxTrialExecDuration
//  - NoSuggestion
//  - AnnotationData
//  - UseEnsemble
type ExperimentAddDto struct {
  Name string `thrift:"Name,1,required" db:"Name" json:"Name"`
  Description string `thrift:"Description,2" db:"Description" json:"Description"`
  ExperimentType ExperimentType `thrift:"ExperimentType,3" db:"ExperimentType" json:"ExperimentType"`
  ExperimentPriority ExperimentPriority `thrift:"ExperimentPriority,4" db:"ExperimentPriority" json:"ExperimentPriority"`
  TrialConcurrency int32 `thrift:"TrialConcurrency,5" db:"TrialConcurrency" json:"TrialConcurrency"`
  MaxExecDuration int32 `thrift:"MaxExecDuration,6" db:"MaxExecDuration" json:"MaxExecDuration"`
  MaxTrialNum int32 `thrift:"MaxTrialNum,7" db:"MaxTrialNum" json:"MaxTrialNum"`
  MaxFailedTrialNum int32 `thrift:"MaxFailedTrialNum,8" db:"MaxFailedTrialNum" json:"MaxFailedTrialNum"`
  SearchSpace string `thrift:"SearchSpace,9" db:"SearchSpace" json:"SearchSpace"`
  OptimizerConfig string `thrift:"OptimizerConfig,10" db:"OptimizerConfig" json:"OptimizerConfig"`
  ModelPath string `thrift:"ModelPath,11" db:"ModelPath" json:"ModelPath"`
  TrialImage string `thrift:"TrialImage,12" db:"TrialImage" json:"TrialImage"`
  TrialCmd string `thrift:"TrialCmd,13" db:"TrialCmd" json:"TrialCmd"`
  InitContainerImage string `thrift:"InitContainerImage,14" db:"InitContainerImage" json:"InitContainerImage"`
  InitContainerMountName string `thrift:"InitContainerMountName,15" db:"InitContainerMountName" json:"InitContainerMountName"`
  InitContainerMountPath string `thrift:"InitContainerMountPath,16" db:"InitContainerMountPath" json:"InitContainerMountPath"`
  CPU int32 `thrift:"Cpu,17" db:"Cpu" json:"Cpu"`
  RAM int64 `thrift:"Ram,18" db:"Ram" json:"Ram"`
  Gpu int32 `thrift:"Gpu,19" db:"Gpu" json:"Gpu"`
  GpuRam float64 `thrift:"GpuRam,20" db:"GpuRam" json:"GpuRam"`
  DataSetPath string `thrift:"DataSetPath,21" db:"DataSetPath" json:"DataSetPath"`
  CodePath string `thrift:"CodePath,22" db:"CodePath" json:"CodePath"`
  TopNum int32 `thrift:"TopNum,23" db:"TopNum" json:"TopNum"`
  TopStandard TopStandard `thrift:"TopStandard,24" db:"TopStandard" json:"TopStandard"`
  TopOrder Order `thrift:"TopOrder,25" db:"TopOrder" json:"TopOrder"`
  TianjiProjectId int64 `thrift:"TianjiProjectId,26" db:"TianjiProjectId" json:"TianjiProjectId"`
  TianjiUserId int64 `thrift:"TianjiUserId,27" db:"TianjiUserId" json:"TianjiUserId"`
  TianjiModelVersion int64 `thrift:"TianjiModelVersion,28" db:"TianjiModelVersion" json:"TianjiModelVersion"`
  TianjiType TianjiType `thrift:"TianjiType,29" db:"TianjiType" json:"TianjiType"`
  TianjiUsedModel string `thrift:"TianjiUsedModel,30" db:"TianjiUsedModel" json:"TianjiUsedModel"`
  TianjiDatasetBucket string `thrift:"TianjiDatasetBucket,31" db:"TianjiDatasetBucket" json:"TianjiDatasetBucket"`
  TianjiPredictID int64 `thrift:"TianjiPredictID,32" db:"TianjiPredictID" json:"TianjiPredictID"`
  FkExperimentId int64 `thrift:"FkExperimentId,33" db:"FkExperimentId" json:"FkExperimentId"`
  MaxTrialExecDuration int64 `thrift:"MaxTrialExecDuration,34" db:"MaxTrialExecDuration" json:"MaxTrialExecDuration"`
  NoSuggestion bool `thrift:"NoSuggestion,35" db:"NoSuggestion" json:"NoSuggestion"`
  AnnotationData string `thrift:"AnnotationData,36" db:"AnnotationData" json:"AnnotationData"`
  UseEnsemble bool `thrift:"UseEnsemble,37" db:"UseEnsemble" json:"UseEnsemble"`
}

func NewExperimentAddDto() *ExperimentAddDto {
  return &ExperimentAddDto{}
}


func (p *ExperimentAddDto) GetName() string {
  return p.Name
}

func (p *ExperimentAddDto) GetDescription() string {
  return p.Description
}

func (p *ExperimentAddDto) GetExperimentType() ExperimentType {
  return p.ExperimentType
}

func (p *ExperimentAddDto) GetExperimentPriority() ExperimentPriority {
  return p.ExperimentPriority
}

func (p *ExperimentAddDto) GetTrialConcurrency() int32 {
  return p.TrialConcurrency
}

func (p *ExperimentAddDto) GetMaxExecDuration() int32 {
  return p.MaxExecDuration
}

func (p *ExperimentAddDto) GetMaxTrialNum() int32 {
  return p.MaxTrialNum
}

func (p *ExperimentAddDto) GetMaxFailedTrialNum() int32 {
  return p.MaxFailedTrialNum
}

func (p *ExperimentAddDto) GetSearchSpace() string {
  return p.SearchSpace
}

func (p *ExperimentAddDto) GetOptimizerConfig() string {
  return p.OptimizerConfig
}

func (p *ExperimentAddDto) GetModelPath() string {
  return p.ModelPath
}

func (p *ExperimentAddDto) GetTrialImage() string {
  return p.TrialImage
}

func (p *ExperimentAddDto) GetTrialCmd() string {
  return p.TrialCmd
}

func (p *ExperimentAddDto) GetInitContainerImage() string {
  return p.InitContainerImage
}

func (p *ExperimentAddDto) GetInitContainerMountName() string {
  return p.InitContainerMountName
}

func (p *ExperimentAddDto) GetInitContainerMountPath() string {
  return p.InitContainerMountPath
}

func (p *ExperimentAddDto) GetCPU() int32 {
  return p.CPU
}

func (p *ExperimentAddDto) GetRAM() int64 {
  return p.RAM
}

func (p *ExperimentAddDto) GetGpu() int32 {
  return p.Gpu
}

func (p *ExperimentAddDto) GetGpuRam() float64 {
  return p.GpuRam
}

func (p *ExperimentAddDto) GetDataSetPath() string {
  return p.DataSetPath
}

func (p *ExperimentAddDto) GetCodePath() string {
  return p.CodePath
}

func (p *ExperimentAddDto) GetTopNum() int32 {
  return p.TopNum
}

func (p *ExperimentAddDto) GetTopStandard() TopStandard {
  return p.TopStandard
}

func (p *ExperimentAddDto) GetTopOrder() Order {
  return p.TopOrder
}

func (p *ExperimentAddDto) GetTianjiProjectId() int64 {
  return p.TianjiProjectId
}

func (p *ExperimentAddDto) GetTianjiUserId() int64 {
  return p.TianjiUserId
}

func (p *ExperimentAddDto) GetTianjiModelVersion() int64 {
  return p.TianjiModelVersion
}

func (p *ExperimentAddDto) GetTianjiType() TianjiType {
  return p.TianjiType
}

func (p *ExperimentAddDto) GetTianjiUsedModel() string {
  return p.TianjiUsedModel
}

func (p *ExperimentAddDto) GetTianjiDatasetBucket() string {
  return p.TianjiDatasetBucket
}

func (p *ExperimentAddDto) GetTianjiPredictID() int64 {
  return p.TianjiPredictID
}

func (p *ExperimentAddDto) GetFkExperimentId() int64 {
  return p.FkExperimentId
}

func (p *ExperimentAddDto) GetMaxTrialExecDuration() int64 {
  return p.MaxTrialExecDuration
}

func (p *ExperimentAddDto) GetNoSuggestion() bool {
  return p.NoSuggestion
}

func (p *ExperimentAddDto) GetAnnotationData() string {
  return p.AnnotationData
}

func (p *ExperimentAddDto) GetUseEnsemble() bool {
  return p.UseEnsemble
}
func (p *ExperimentAddDto) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField37(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *ExperimentAddDto)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ExperimentType(v)
  p.ExperimentType = temp
}
  return nil
}

func (p *ExperimentAddDto)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ExperimentPriority(v)
  p.ExperimentPriority = temp
}
  return nil
}

func (p *ExperimentAddDto)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TrialConcurrency = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxExecDuration = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MaxTrialNum = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MaxFailedTrialNum = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SearchSpace = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OptimizerConfig = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ModelPath = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TrialImage = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.TrialCmd = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.InitContainerImage = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.InitContainerMountName = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.InitContainerMountPath = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.CPU = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.RAM = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Gpu = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.GpuRam = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.DataSetPath = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.CodePath = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.TopNum = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := TopStandard(v)
  p.TopStandard = temp
}
  return nil
}

func (p *ExperimentAddDto)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := Order(v)
  p.TopOrder = temp
}
  return nil
}

func (p *ExperimentAddDto)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.TianjiProjectId = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.TianjiUserId = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.TianjiModelVersion = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  temp := TianjiType(v)
  p.TianjiType = temp
}
  return nil
}

func (p *ExperimentAddDto)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.TianjiUsedModel = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.TianjiDatasetBucket = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.TianjiPredictID = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.FkExperimentId = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MaxTrialExecDuration = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.NoSuggestion = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField36(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.AnnotationData = v
}
  return nil
}

func (p *ExperimentAddDto)  ReadField37(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.UseEnsemble = v
}
  return nil
}

func (p *ExperimentAddDto) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentAddDto"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentAddDto) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Name: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Description: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExperimentType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ExperimentType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExperimentType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ExperimentType: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExperimentPriority", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ExperimentPriority: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentPriority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExperimentPriority (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ExperimentPriority: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrialConcurrency", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:TrialConcurrency: ", p), err) }
  if err := oprot.WriteI32(int32(p.TrialConcurrency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrialConcurrency (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:TrialConcurrency: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MaxExecDuration", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MaxExecDuration: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxExecDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MaxExecDuration (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MaxExecDuration: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MaxTrialNum", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MaxTrialNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxTrialNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MaxTrialNum (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MaxTrialNum: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MaxFailedTrialNum", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:MaxFailedTrialNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxFailedTrialNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MaxFailedTrialNum (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:MaxFailedTrialNum: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SearchSpace", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:SearchSpace: ", p), err) }
  if err := oprot.WriteString(string(p.SearchSpace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SearchSpace (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:SearchSpace: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OptimizerConfig", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:OptimizerConfig: ", p), err) }
  if err := oprot.WriteString(string(p.OptimizerConfig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.OptimizerConfig (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:OptimizerConfig: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelPath", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ModelPath: ", p), err) }
  if err := oprot.WriteString(string(p.ModelPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelPath (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ModelPath: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrialImage", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:TrialImage: ", p), err) }
  if err := oprot.WriteString(string(p.TrialImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrialImage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:TrialImage: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrialCmd", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:TrialCmd: ", p), err) }
  if err := oprot.WriteString(string(p.TrialCmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrialCmd (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:TrialCmd: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InitContainerImage", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:InitContainerImage: ", p), err) }
  if err := oprot.WriteString(string(p.InitContainerImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InitContainerImage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:InitContainerImage: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InitContainerMountName", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:InitContainerMountName: ", p), err) }
  if err := oprot.WriteString(string(p.InitContainerMountName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InitContainerMountName (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:InitContainerMountName: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InitContainerMountPath", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:InitContainerMountPath: ", p), err) }
  if err := oprot.WriteString(string(p.InitContainerMountPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.InitContainerMountPath (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:InitContainerMountPath: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Cpu", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Cpu: ", p), err) }
  if err := oprot.WriteI32(int32(p.CPU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Cpu (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Cpu: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ram", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Ram: ", p), err) }
  if err := oprot.WriteI64(int64(p.RAM)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ram (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Ram: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Gpu", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Gpu: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gpu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Gpu (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Gpu: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GpuRam", thrift.DOUBLE, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:GpuRam: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GpuRam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GpuRam (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:GpuRam: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DataSetPath", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:DataSetPath: ", p), err) }
  if err := oprot.WriteString(string(p.DataSetPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DataSetPath (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:DataSetPath: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CodePath", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:CodePath: ", p), err) }
  if err := oprot.WriteString(string(p.CodePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CodePath (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:CodePath: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TopNum", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:TopNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.TopNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TopNum (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:TopNum: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TopStandard", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:TopStandard: ", p), err) }
  if err := oprot.WriteI32(int32(p.TopStandard)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TopStandard (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:TopStandard: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TopOrder", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:TopOrder: ", p), err) }
  if err := oprot.WriteI32(int32(p.TopOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TopOrder (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:TopOrder: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiProjectId", thrift.I64, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:TianjiProjectId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TianjiProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiProjectId (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:TianjiProjectId: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiUserId", thrift.I64, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:TianjiUserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TianjiUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiUserId (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:TianjiUserId: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiModelVersion", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:TianjiModelVersion: ", p), err) }
  if err := oprot.WriteI64(int64(p.TianjiModelVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiModelVersion (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:TianjiModelVersion: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiType", thrift.I32, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:TianjiType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TianjiType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiType (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:TianjiType: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiUsedModel", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:TianjiUsedModel: ", p), err) }
  if err := oprot.WriteString(string(p.TianjiUsedModel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiUsedModel (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:TianjiUsedModel: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiDatasetBucket", thrift.STRING, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:TianjiDatasetBucket: ", p), err) }
  if err := oprot.WriteString(string(p.TianjiDatasetBucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiDatasetBucket (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:TianjiDatasetBucket: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TianjiPredictID", thrift.I64, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:TianjiPredictID: ", p), err) }
  if err := oprot.WriteI64(int64(p.TianjiPredictID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TianjiPredictID (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:TianjiPredictID: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FkExperimentId", thrift.I64, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:FkExperimentId: ", p), err) }
  if err := oprot.WriteI64(int64(p.FkExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FkExperimentId (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:FkExperimentId: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MaxTrialExecDuration", thrift.I64, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:MaxTrialExecDuration: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxTrialExecDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MaxTrialExecDuration (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:MaxTrialExecDuration: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NoSuggestion", thrift.BOOL, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:NoSuggestion: ", p), err) }
  if err := oprot.WriteBool(bool(p.NoSuggestion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NoSuggestion (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:NoSuggestion: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField36(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AnnotationData", thrift.STRING, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:AnnotationData: ", p), err) }
  if err := oprot.WriteString(string(p.AnnotationData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AnnotationData (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:AnnotationData: ", p), err) }
  return err
}

func (p *ExperimentAddDto) writeField37(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UseEnsemble", thrift.BOOL, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:UseEnsemble: ", p), err) }
  if err := oprot.WriteBool(bool(p.UseEnsemble)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UseEnsemble (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:UseEnsemble: ", p), err) }
  return err
}

func (p *ExperimentAddDto) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentAddDto(%+v)", *p)
}

// Attributes:
//  - ID
//  - StartTime
//  - EndTime
//  - ExecDuration
//  - Status
type ExperimentEditDto struct {
  ID int64 `thrift:"Id,1,required" db:"Id" json:"Id"`
  StartTime string `thrift:"StartTime,2" db:"StartTime" json:"StartTime"`
  EndTime string `thrift:"EndTime,3" db:"EndTime" json:"EndTime"`
  ExecDuration int64 `thrift:"ExecDuration,4" db:"ExecDuration" json:"ExecDuration"`
  Status ExperimentStatus `thrift:"Status,5" db:"Status" json:"Status"`
}

func NewExperimentEditDto() *ExperimentEditDto {
  return &ExperimentEditDto{}
}


func (p *ExperimentEditDto) GetID() int64 {
  return p.ID
}

func (p *ExperimentEditDto) GetStartTime() string {
  return p.StartTime
}

func (p *ExperimentEditDto) GetEndTime() string {
  return p.EndTime
}

func (p *ExperimentEditDto) GetExecDuration() int64 {
  return p.ExecDuration
}

func (p *ExperimentEditDto) GetStatus() ExperimentStatus {
  return p.Status
}
func (p *ExperimentEditDto) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *ExperimentEditDto)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ExperimentEditDto)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ExperimentEditDto)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ExperimentEditDto)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExecDuration = v
}
  return nil
}

func (p *ExperimentEditDto)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ExperimentStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ExperimentEditDto) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentEditDto"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentEditDto) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *ExperimentEditDto) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StartTime", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:StartTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StartTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:StartTime: ", p), err) }
  return err
}

func (p *ExperimentEditDto) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EndTime", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:EndTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EndTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:EndTime: ", p), err) }
  return err
}

func (p *ExperimentEditDto) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ExecDuration", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ExecDuration: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ExecDuration (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ExecDuration: ", p), err) }
  return err
}

func (p *ExperimentEditDto) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Status: ", p), err) }
  return err
}

func (p *ExperimentEditDto) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentEditDto(%+v)", *p)
}

// Attributes:
//  - ID
//  - TrialName
//  - ModelName
//  - UsedModels
//  - RecomModel
//  - MetricType
//  - MetricValue
//  - ModelPath
//  - ModelParams
//  - FeatureNum
//  - FeatureImportance
//  - EvalResult_
//  - PredictProb
//  - EvalData
//  - StartTime
//  - EndTime
//  - Duration
//  - Status
//  - ModelVersion
//  - TrainConsuming
//  - ParamSpace
//  - BestMetric
//  - NodeIP
//  - PerformanceType
//  - PerformanceValue
//  - PreviewData
//  - PredictResultFileName
//  - Updater
type TrialEditDto struct {
  ID int64 `thrift:"Id,1,required" db:"Id" json:"Id"`
  TrialName string `thrift:"TrialName,2,required" db:"TrialName" json:"TrialName"`
  ModelName string `thrift:"ModelName,3" db:"ModelName" json:"ModelName"`
  UsedModels string `thrift:"UsedModels,4" db:"UsedModels" json:"UsedModels"`
  RecomModel string `thrift:"RecomModel,5" db:"RecomModel" json:"RecomModel"`
  MetricType string `thrift:"MetricType,6" db:"MetricType" json:"MetricType"`
  MetricValue float64 `thrift:"MetricValue,7" db:"MetricValue" json:"MetricValue"`
  ModelPath string `thrift:"ModelPath,8" db:"ModelPath" json:"ModelPath"`
  ModelParams string `thrift:"ModelParams,9" db:"ModelParams" json:"ModelParams"`
  FeatureNum string `thrift:"FeatureNum,10" db:"FeatureNum" json:"FeatureNum"`
  FeatureImportance string `thrift:"FeatureImportance,11" db:"FeatureImportance" json:"FeatureImportance"`
  EvalResult_ string `thrift:"EvalResult,12" db:"EvalResult" json:"EvalResult"`
  PredictProb string `thrift:"PredictProb,13" db:"PredictProb" json:"PredictProb"`
  EvalData string `thrift:"EvalData,14" db:"EvalData" json:"EvalData"`
  StartTime string `thrift:"StartTime,15" db:"StartTime" json:"StartTime"`
  EndTime string `thrift:"EndTime,16" db:"EndTime" json:"EndTime"`
  Duration int64 `thrift:"Duration,17" db:"Duration" json:"Duration"`
  Status TrialStatus `thrift:"Status,18" db:"Status" json:"Status"`
  ModelVersion int64 `thrift:"ModelVersion,19" db:"ModelVersion" json:"ModelVersion"`
  TrainConsuming string `thrift:"TrainConsuming,20" db:"TrainConsuming" json:"TrainConsuming"`
  ParamSpace string `thrift:"ParamSpace,21" db:"ParamSpace" json:"ParamSpace"`
  BestMetric float64 `thrift:"BestMetric,22" db:"BestMetric" json:"BestMetric"`
  NodeIP string `thrift:"NodeIP,23" db:"NodeIP" json:"NodeIP"`
  PerformanceType string `thrift:"PerformanceType,24" db:"PerformanceType" json:"PerformanceType"`
  PerformanceValue float64 `thrift:"PerformanceValue,25" db:"PerformanceValue" json:"PerformanceValue"`
  PreviewData string `thrift:"PreviewData,26" db:"PreviewData" json:"PreviewData"`
  PredictResultFileName string `thrift:"PredictResultFileName,27" db:"PredictResultFileName" json:"PredictResultFileName"`
  Updater TrialStatusUpdater `thrift:"Updater,28" db:"Updater" json:"Updater"`
}

func NewTrialEditDto() *TrialEditDto {
  return &TrialEditDto{}
}


func (p *TrialEditDto) GetID() int64 {
  return p.ID
}

func (p *TrialEditDto) GetTrialName() string {
  return p.TrialName
}

func (p *TrialEditDto) GetModelName() string {
  return p.ModelName
}

func (p *TrialEditDto) GetUsedModels() string {
  return p.UsedModels
}

func (p *TrialEditDto) GetRecomModel() string {
  return p.RecomModel
}

func (p *TrialEditDto) GetMetricType() string {
  return p.MetricType
}

func (p *TrialEditDto) GetMetricValue() float64 {
  return p.MetricValue
}

func (p *TrialEditDto) GetModelPath() string {
  return p.ModelPath
}

func (p *TrialEditDto) GetModelParams() string {
  return p.ModelParams
}

func (p *TrialEditDto) GetFeatureNum() string {
  return p.FeatureNum
}

func (p *TrialEditDto) GetFeatureImportance() string {
  return p.FeatureImportance
}

func (p *TrialEditDto) GetEvalResult_() string {
  return p.EvalResult_
}

func (p *TrialEditDto) GetPredictProb() string {
  return p.PredictProb
}

func (p *TrialEditDto) GetEvalData() string {
  return p.EvalData
}

func (p *TrialEditDto) GetStartTime() string {
  return p.StartTime
}

func (p *TrialEditDto) GetEndTime() string {
  return p.EndTime
}

func (p *TrialEditDto) GetDuration() int64 {
  return p.Duration
}

func (p *TrialEditDto) GetStatus() TrialStatus {
  return p.Status
}

func (p *TrialEditDto) GetModelVersion() int64 {
  return p.ModelVersion
}

func (p *TrialEditDto) GetTrainConsuming() string {
  return p.TrainConsuming
}

func (p *TrialEditDto) GetParamSpace() string {
  return p.ParamSpace
}

func (p *TrialEditDto) GetBestMetric() float64 {
  return p.BestMetric
}

func (p *TrialEditDto) GetNodeIP() string {
  return p.NodeIP
}

func (p *TrialEditDto) GetPerformanceType() string {
  return p.PerformanceType
}

func (p *TrialEditDto) GetPerformanceValue() float64 {
  return p.PerformanceValue
}

func (p *TrialEditDto) GetPreviewData() string {
  return p.PreviewData
}

func (p *TrialEditDto) GetPredictResultFileName() string {
  return p.PredictResultFileName
}

func (p *TrialEditDto) GetUpdater() TrialStatusUpdater {
  return p.Updater
}
func (p *TrialEditDto) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetTrialName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetTrialName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetTrialName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TrialName is not set"));
  }
  return nil
}

func (p *TrialEditDto)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TrialEditDto)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrialName = v
}
  return nil
}

func (p *TrialEditDto)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ModelName = v
}
  return nil
}

func (p *TrialEditDto)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UsedModels = v
}
  return nil
}

func (p *TrialEditDto)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RecomModel = v
}
  return nil
}

func (p *TrialEditDto)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MetricType = v
}
  return nil
}

func (p *TrialEditDto)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MetricValue = v
}
  return nil
}

func (p *TrialEditDto)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ModelPath = v
}
  return nil
}

func (p *TrialEditDto)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ModelParams = v
}
  return nil
}

func (p *TrialEditDto)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FeatureNum = v
}
  return nil
}

func (p *TrialEditDto)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.FeatureImportance = v
}
  return nil
}

func (p *TrialEditDto)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EvalResult_ = v
}
  return nil
}

func (p *TrialEditDto)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PredictProb = v
}
  return nil
}

func (p *TrialEditDto)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.EvalData = v
}
  return nil
}

func (p *TrialEditDto)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TrialEditDto)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TrialEditDto)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *TrialEditDto)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  temp := TrialStatus(v)
  p.Status = temp
}
  return nil
}

func (p *TrialEditDto)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ModelVersion = v
}
  return nil
}

func (p *TrialEditDto)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.TrainConsuming = v
}
  return nil
}

func (p *TrialEditDto)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.ParamSpace = v
}
  return nil
}

func (p *TrialEditDto)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.BestMetric = v
}
  return nil
}

func (p *TrialEditDto)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.NodeIP = v
}
  return nil
}

func (p *TrialEditDto)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PerformanceType = v
}
  return nil
}

func (p *TrialEditDto)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PerformanceValue = v
}
  return nil
}

func (p *TrialEditDto)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PreviewData = v
}
  return nil
}

func (p *TrialEditDto)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PredictResultFileName = v
}
  return nil
}

func (p *TrialEditDto)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  temp := TrialStatusUpdater(v)
  p.Updater = temp
}
  return nil
}

func (p *TrialEditDto) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TrialEditDto"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TrialEditDto) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrialName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:TrialName: ", p), err) }
  if err := oprot.WriteString(string(p.TrialName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrialName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:TrialName: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ModelName: ", p), err) }
  if err := oprot.WriteString(string(p.ModelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ModelName: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UsedModels", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:UsedModels: ", p), err) }
  if err := oprot.WriteString(string(p.UsedModels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UsedModels (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:UsedModels: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("RecomModel", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:RecomModel: ", p), err) }
  if err := oprot.WriteString(string(p.RecomModel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.RecomModel (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:RecomModel: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MetricType", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:MetricType: ", p), err) }
  if err := oprot.WriteString(string(p.MetricType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MetricType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:MetricType: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MetricValue", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MetricValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.MetricValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MetricValue (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MetricValue: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelPath", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ModelPath: ", p), err) }
  if err := oprot.WriteString(string(p.ModelPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelPath (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ModelPath: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelParams", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ModelParams: ", p), err) }
  if err := oprot.WriteString(string(p.ModelParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelParams (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ModelParams: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FeatureNum", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:FeatureNum: ", p), err) }
  if err := oprot.WriteString(string(p.FeatureNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FeatureNum (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:FeatureNum: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FeatureImportance", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:FeatureImportance: ", p), err) }
  if err := oprot.WriteString(string(p.FeatureImportance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FeatureImportance (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:FeatureImportance: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EvalResult", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:EvalResult: ", p), err) }
  if err := oprot.WriteString(string(p.EvalResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EvalResult (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:EvalResult: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PredictProb", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:PredictProb: ", p), err) }
  if err := oprot.WriteString(string(p.PredictProb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PredictProb (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:PredictProb: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EvalData", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:EvalData: ", p), err) }
  if err := oprot.WriteString(string(p.EvalData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EvalData (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:EvalData: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StartTime", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:StartTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StartTime (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:StartTime: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("EndTime", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:EndTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.EndTime (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:EndTime: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Duration", thrift.I64, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:Duration: ", p), err) }
  if err := oprot.WriteI64(int64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Duration (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:Duration: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:Status: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelVersion", thrift.I64, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:ModelVersion: ", p), err) }
  if err := oprot.WriteI64(int64(p.ModelVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelVersion (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:ModelVersion: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TrainConsuming", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:TrainConsuming: ", p), err) }
  if err := oprot.WriteString(string(p.TrainConsuming)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TrainConsuming (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:TrainConsuming: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ParamSpace", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:ParamSpace: ", p), err) }
  if err := oprot.WriteString(string(p.ParamSpace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ParamSpace (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:ParamSpace: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BestMetric", thrift.DOUBLE, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:BestMetric: ", p), err) }
  if err := oprot.WriteDouble(float64(p.BestMetric)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BestMetric (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:BestMetric: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NodeIP", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:NodeIP: ", p), err) }
  if err := oprot.WriteString(string(p.NodeIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NodeIP (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:NodeIP: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PerformanceType", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:PerformanceType: ", p), err) }
  if err := oprot.WriteString(string(p.PerformanceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PerformanceType (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:PerformanceType: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PerformanceValue", thrift.DOUBLE, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:PerformanceValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.PerformanceValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PerformanceValue (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:PerformanceValue: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PreviewData", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:PreviewData: ", p), err) }
  if err := oprot.WriteString(string(p.PreviewData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PreviewData (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:PreviewData: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PredictResultFileName", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:PredictResultFileName: ", p), err) }
  if err := oprot.WriteString(string(p.PredictResultFileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PredictResultFileName (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:PredictResultFileName: ", p), err) }
  return err
}

func (p *TrialEditDto) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Updater", thrift.I32, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:Updater: ", p), err) }
  if err := oprot.WriteI32(int32(p.Updater)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Updater (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:Updater: ", p), err) }
  return err
}

func (p *TrialEditDto) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TrialEditDto(%+v)", *p)
}

// Attributes:
//  - UserID
//  - ProjectID
//  - Name
//  - ServiceID
//  - ServiceImage
//  - ServicePort
//  - ServiceCmd
//  - ServicePodNum
//  - ServiceRouterPath
//  - CPU
//  - RAM
//  - Gpu
//  - GpuRam
//  - UsedModel
//  - ModelPath
//  - Bucket
type InferAddDto struct {
  UserID int64 `thrift:"UserID,1,required" db:"UserID" json:"UserID"`
  ProjectID int64 `thrift:"ProjectID,2,required" db:"ProjectID" json:"ProjectID"`
  Name string `thrift:"Name,3,required" db:"Name" json:"Name"`
  ServiceID int64 `thrift:"ServiceID,4,required" db:"ServiceID" json:"ServiceID"`
  ServiceImage string `thrift:"ServiceImage,5,required" db:"ServiceImage" json:"ServiceImage"`
  ServicePort int32 `thrift:"ServicePort,6,required" db:"ServicePort" json:"ServicePort"`
  ServiceCmd string `thrift:"ServiceCmd,7,required" db:"ServiceCmd" json:"ServiceCmd"`
  ServicePodNum int32 `thrift:"ServicePodNum,8,required" db:"ServicePodNum" json:"ServicePodNum"`
  ServiceRouterPath string `thrift:"ServiceRouterPath,9,required" db:"ServiceRouterPath" json:"ServiceRouterPath"`
  CPU int32 `thrift:"Cpu,10" db:"Cpu" json:"Cpu"`
  RAM int64 `thrift:"Ram,11" db:"Ram" json:"Ram"`
  Gpu int32 `thrift:"Gpu,12" db:"Gpu" json:"Gpu"`
  GpuRam float64 `thrift:"GpuRam,13" db:"GpuRam" json:"GpuRam"`
  UsedModel string `thrift:"UsedModel,14,required" db:"UsedModel" json:"UsedModel"`
  ModelPath string `thrift:"ModelPath,15,required" db:"ModelPath" json:"ModelPath"`
  Bucket string `thrift:"Bucket,16,required" db:"Bucket" json:"Bucket"`
}

func NewInferAddDto() *InferAddDto {
  return &InferAddDto{}
}


func (p *InferAddDto) GetUserID() int64 {
  return p.UserID
}

func (p *InferAddDto) GetProjectID() int64 {
  return p.ProjectID
}

func (p *InferAddDto) GetName() string {
  return p.Name
}

func (p *InferAddDto) GetServiceID() int64 {
  return p.ServiceID
}

func (p *InferAddDto) GetServiceImage() string {
  return p.ServiceImage
}

func (p *InferAddDto) GetServicePort() int32 {
  return p.ServicePort
}

func (p *InferAddDto) GetServiceCmd() string {
  return p.ServiceCmd
}

func (p *InferAddDto) GetServicePodNum() int32 {
  return p.ServicePodNum
}

func (p *InferAddDto) GetServiceRouterPath() string {
  return p.ServiceRouterPath
}

func (p *InferAddDto) GetCPU() int32 {
  return p.CPU
}

func (p *InferAddDto) GetRAM() int64 {
  return p.RAM
}

func (p *InferAddDto) GetGpu() int32 {
  return p.Gpu
}

func (p *InferAddDto) GetGpuRam() float64 {
  return p.GpuRam
}

func (p *InferAddDto) GetUsedModel() string {
  return p.UsedModel
}

func (p *InferAddDto) GetModelPath() string {
  return p.ModelPath
}

func (p *InferAddDto) GetBucket() string {
  return p.Bucket
}
func (p *InferAddDto) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUserID bool = false;
  var issetProjectID bool = false;
  var issetName bool = false;
  var issetServiceID bool = false;
  var issetServiceImage bool = false;
  var issetServicePort bool = false;
  var issetServiceCmd bool = false;
  var issetServicePodNum bool = false;
  var issetServiceRouterPath bool = false;
  var issetUsedModel bool = false;
  var issetModelPath bool = false;
  var issetBucket bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUserID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetProjectID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetServiceID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetServiceImage = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetServicePort = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetServiceCmd = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
        issetServicePodNum = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
        issetServiceRouterPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
        issetUsedModel = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
        issetModelPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
        issetBucket = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUserID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserID is not set"));
  }
  if !issetProjectID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProjectID is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetServiceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceID is not set"));
  }
  if !issetServiceImage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceImage is not set"));
  }
  if !issetServicePort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServicePort is not set"));
  }
  if !issetServiceCmd{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceCmd is not set"));
  }
  if !issetServicePodNum{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServicePodNum is not set"));
  }
  if !issetServiceRouterPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceRouterPath is not set"));
  }
  if !issetUsedModel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UsedModel is not set"));
  }
  if !issetModelPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelPath is not set"));
  }
  if !issetBucket{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bucket is not set"));
  }
  return nil
}

func (p *InferAddDto)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *InferAddDto)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectID = v
}
  return nil
}

func (p *InferAddDto)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *InferAddDto)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ServiceID = v
}
  return nil
}

func (p *InferAddDto)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ServiceImage = v
}
  return nil
}

func (p *InferAddDto)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ServicePort = v
}
  return nil
}

func (p *InferAddDto)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ServiceCmd = v
}
  return nil
}

func (p *InferAddDto)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ServicePodNum = v
}
  return nil
}

func (p *InferAddDto)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ServiceRouterPath = v
}
  return nil
}

func (p *InferAddDto)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CPU = v
}
  return nil
}

func (p *InferAddDto)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RAM = v
}
  return nil
}

func (p *InferAddDto)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Gpu = v
}
  return nil
}

func (p *InferAddDto)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.GpuRam = v
}
  return nil
}

func (p *InferAddDto)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.UsedModel = v
}
  return nil
}

func (p *InferAddDto)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ModelPath = v
}
  return nil
}

func (p *InferAddDto)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *InferAddDto) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InferAddDto"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InferAddDto) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserID: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserID: ", p), err) }
  return err
}

func (p *InferAddDto) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ProjectID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ProjectID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ProjectID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ProjectID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ProjectID: ", p), err) }
  return err
}

func (p *InferAddDto) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Name: ", p), err) }
  return err
}

func (p *InferAddDto) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServiceID", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ServiceID: ", p), err) }
  if err := oprot.WriteI64(int64(p.ServiceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServiceID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ServiceID: ", p), err) }
  return err
}

func (p *InferAddDto) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServiceImage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ServiceImage: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServiceImage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ServiceImage: ", p), err) }
  return err
}

func (p *InferAddDto) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServicePort", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ServicePort: ", p), err) }
  if err := oprot.WriteI32(int32(p.ServicePort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServicePort (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ServicePort: ", p), err) }
  return err
}

func (p *InferAddDto) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServiceCmd", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ServiceCmd: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceCmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServiceCmd (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ServiceCmd: ", p), err) }
  return err
}

func (p *InferAddDto) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServicePodNum", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ServicePodNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.ServicePodNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServicePodNum (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ServicePodNum: ", p), err) }
  return err
}

func (p *InferAddDto) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ServiceRouterPath", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ServiceRouterPath: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceRouterPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ServiceRouterPath (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ServiceRouterPath: ", p), err) }
  return err
}

func (p *InferAddDto) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Cpu", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Cpu: ", p), err) }
  if err := oprot.WriteI32(int32(p.CPU)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Cpu (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Cpu: ", p), err) }
  return err
}

func (p *InferAddDto) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Ram", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Ram: ", p), err) }
  if err := oprot.WriteI64(int64(p.RAM)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Ram (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Ram: ", p), err) }
  return err
}

func (p *InferAddDto) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Gpu", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Gpu: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gpu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Gpu (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Gpu: ", p), err) }
  return err
}

func (p *InferAddDto) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GpuRam", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:GpuRam: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GpuRam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GpuRam (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:GpuRam: ", p), err) }
  return err
}

func (p *InferAddDto) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UsedModel", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:UsedModel: ", p), err) }
  if err := oprot.WriteString(string(p.UsedModel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UsedModel (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:UsedModel: ", p), err) }
  return err
}

func (p *InferAddDto) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ModelPath", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ModelPath: ", p), err) }
  if err := oprot.WriteString(string(p.ModelPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ModelPath (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ModelPath: ", p), err) }
  return err
}

func (p *InferAddDto) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Bucket", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Bucket (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Bucket: ", p), err) }
  return err
}

func (p *InferAddDto) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InferAddDto(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
type ManagerException struct {
  ErrorCode int32 `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewManagerException() *ManagerException {
  return &ManagerException{}
}


func (p *ManagerException) GetErrorCode() int32 {
  return p.ErrorCode
}

func (p *ManagerException) GetMessage() string {
  return p.Message
}
func (p *ManagerException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ManagerException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *ManagerException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ManagerException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManagerException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ManagerException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *ManagerException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ManagerException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ManagerException(%+v)", *p)
}

func (p *ManagerException) Error() string {
  return p.String()
}

type DbManager interface {
  // Parameters:
  //  - Experiment
  CreateExperiment(ctx context.Context, experiment *ExperimentAddDto) (r int64, err error)
  // Parameters:
  //  - Experiment
  UpdateExperiment(ctx context.Context, experiment *ExperimentEditDto) (r bool, err error)
  // Parameters:
  //  - ExperimentId
  DeleteExperiment(ctx context.Context, experimentId int64) (r bool, err error)
  // Parameters:
  //  - ExperimentId
  //  - TrialNo
  //  - TrialName
  CreateTrial(ctx context.Context, experimentId int64, trialNo int32, trialName string) (r int64, err error)
  // Parameters:
  //  - ID
  SuspendTrial(ctx context.Context, id int64) (r bool, err error)
  // Parameters:
  //  - ID
  ResumeTrial(ctx context.Context, id int64) (r bool, err error)
  // Parameters:
  //  - ID
  DeleteTrial(ctx context.Context, id int64) (r bool, err error)
  // Parameters:
  //  - Trial
  UpdateTrialStatus(ctx context.Context, trial *TrialEditDto) (r bool, err error)
  // Parameters:
  //  - Infer
  CreateInfer(ctx context.Context, infer *InferAddDto) (r int64, err error)
  // Parameters:
  //  - ID
  SuspendInfer(ctx context.Context, id int64) (r bool, err error)
  // Parameters:
  //  - ID
  ResumeInfer(ctx context.Context, id int64) (r bool, err error)
  // Parameters:
  //  - ID
  DeleteInfer(ctx context.Context, id int64) (r bool, err error)
}

type DbManagerClient struct {
  c thrift.TClient
}

func NewDbManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DbManagerClient {
  return &DbManagerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewDbManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DbManagerClient {
  return &DbManagerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDbManagerClient(c thrift.TClient) *DbManagerClient {
  return &DbManagerClient{
    c: c,
  }
}

func (p *DbManagerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Experiment
func (p *DbManagerClient) CreateExperiment(ctx context.Context, experiment *ExperimentAddDto) (r int64, err error) {
  var _args0 DbManagerCreateExperimentArgs
  _args0.Experiment = experiment
  var _result1 DbManagerCreateExperimentResult
  if err = p.Client_().Call(ctx, "CreateExperiment", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Err!= nil:
    return r, _result1.Err
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Experiment
func (p *DbManagerClient) UpdateExperiment(ctx context.Context, experiment *ExperimentEditDto) (r bool, err error) {
  var _args2 DbManagerUpdateExperimentArgs
  _args2.Experiment = experiment
  var _result3 DbManagerUpdateExperimentResult
  if err = p.Client_().Call(ctx, "UpdateExperiment", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Err!= nil:
    return r, _result3.Err
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - ExperimentId
func (p *DbManagerClient) DeleteExperiment(ctx context.Context, experimentId int64) (r bool, err error) {
  var _args4 DbManagerDeleteExperimentArgs
  _args4.ExperimentId = experimentId
  var _result5 DbManagerDeleteExperimentResult
  if err = p.Client_().Call(ctx, "DeleteExperiment", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Err!= nil:
    return r, _result5.Err
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - ExperimentId
//  - TrialNo
//  - TrialName
func (p *DbManagerClient) CreateTrial(ctx context.Context, experimentId int64, trialNo int32, trialName string) (r int64, err error) {
  var _args6 DbManagerCreateTrialArgs
  _args6.ExperimentId = experimentId
  _args6.TrialNo = trialNo
  _args6.TrialName = trialName
  var _result7 DbManagerCreateTrialResult
  if err = p.Client_().Call(ctx, "CreateTrial", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Err!= nil:
    return r, _result7.Err
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) SuspendTrial(ctx context.Context, id int64) (r bool, err error) {
  var _args8 DbManagerSuspendTrialArgs
  _args8.ID = id
  var _result9 DbManagerSuspendTrialResult
  if err = p.Client_().Call(ctx, "SuspendTrial", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Err!= nil:
    return r, _result9.Err
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) ResumeTrial(ctx context.Context, id int64) (r bool, err error) {
  var _args10 DbManagerResumeTrialArgs
  _args10.ID = id
  var _result11 DbManagerResumeTrialResult
  if err = p.Client_().Call(ctx, "ResumeTrial", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Err!= nil:
    return r, _result11.Err
  }

  return _result11.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) DeleteTrial(ctx context.Context, id int64) (r bool, err error) {
  var _args12 DbManagerDeleteTrialArgs
  _args12.ID = id
  var _result13 DbManagerDeleteTrialResult
  if err = p.Client_().Call(ctx, "DeleteTrial", &_args12, &_result13); err != nil {
    return
  }
  switch {
  case _result13.Err!= nil:
    return r, _result13.Err
  }

  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Trial
func (p *DbManagerClient) UpdateTrialStatus(ctx context.Context, trial *TrialEditDto) (r bool, err error) {
  var _args14 DbManagerUpdateTrialStatusArgs
  _args14.Trial = trial
  var _result15 DbManagerUpdateTrialStatusResult
  if err = p.Client_().Call(ctx, "UpdateTrialStatus", &_args14, &_result15); err != nil {
    return
  }
  switch {
  case _result15.Err!= nil:
    return r, _result15.Err
  }

  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Infer
func (p *DbManagerClient) CreateInfer(ctx context.Context, infer *InferAddDto) (r int64, err error) {
  var _args16 DbManagerCreateInferArgs
  _args16.Infer = infer
  var _result17 DbManagerCreateInferResult
  if err = p.Client_().Call(ctx, "CreateInfer", &_args16, &_result17); err != nil {
    return
  }
  switch {
  case _result17.Err!= nil:
    return r, _result17.Err
  }

  return _result17.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) SuspendInfer(ctx context.Context, id int64) (r bool, err error) {
  var _args18 DbManagerSuspendInferArgs
  _args18.ID = id
  var _result19 DbManagerSuspendInferResult
  if err = p.Client_().Call(ctx, "SuspendInfer", &_args18, &_result19); err != nil {
    return
  }
  switch {
  case _result19.Err!= nil:
    return r, _result19.Err
  }

  return _result19.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) ResumeInfer(ctx context.Context, id int64) (r bool, err error) {
  var _args20 DbManagerResumeInferArgs
  _args20.ID = id
  var _result21 DbManagerResumeInferResult
  if err = p.Client_().Call(ctx, "ResumeInfer", &_args20, &_result21); err != nil {
    return
  }
  switch {
  case _result21.Err!= nil:
    return r, _result21.Err
  }

  return _result21.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *DbManagerClient) DeleteInfer(ctx context.Context, id int64) (r bool, err error) {
  var _args22 DbManagerDeleteInferArgs
  _args22.ID = id
  var _result23 DbManagerDeleteInferResult
  if err = p.Client_().Call(ctx, "DeleteInfer", &_args22, &_result23); err != nil {
    return
  }
  switch {
  case _result23.Err!= nil:
    return r, _result23.Err
  }

  return _result23.GetSuccess(), nil
}

type DbManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler DbManager
}

func (p *DbManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DbManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DbManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDbManagerProcessor(handler DbManager) *DbManagerProcessor {

  self24 := &DbManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["CreateExperiment"] = &dbManagerProcessorCreateExperiment{handler:handler}
  self24.processorMap["UpdateExperiment"] = &dbManagerProcessorUpdateExperiment{handler:handler}
  self24.processorMap["DeleteExperiment"] = &dbManagerProcessorDeleteExperiment{handler:handler}
  self24.processorMap["CreateTrial"] = &dbManagerProcessorCreateTrial{handler:handler}
  self24.processorMap["SuspendTrial"] = &dbManagerProcessorSuspendTrial{handler:handler}
  self24.processorMap["ResumeTrial"] = &dbManagerProcessorResumeTrial{handler:handler}
  self24.processorMap["DeleteTrial"] = &dbManagerProcessorDeleteTrial{handler:handler}
  self24.processorMap["UpdateTrialStatus"] = &dbManagerProcessorUpdateTrialStatus{handler:handler}
  self24.processorMap["CreateInfer"] = &dbManagerProcessorCreateInfer{handler:handler}
  self24.processorMap["SuspendInfer"] = &dbManagerProcessorSuspendInfer{handler:handler}
  self24.processorMap["ResumeInfer"] = &dbManagerProcessorResumeInfer{handler:handler}
  self24.processorMap["DeleteInfer"] = &dbManagerProcessorDeleteInfer{handler:handler}
return self24
}

func (p *DbManagerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x25

}

type dbManagerProcessorCreateExperiment struct {
  handler DbManager
}

func (p *dbManagerProcessorCreateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerCreateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerCreateExperimentResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.CreateExperiment(ctx, args.Experiment); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateExperiment: " + err2.Error())
    oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CreateExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorUpdateExperiment struct {
  handler DbManager
}

func (p *dbManagerProcessorUpdateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerUpdateExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerUpdateExperimentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateExperiment(ctx, args.Experiment); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateExperiment: " + err2.Error())
    oprot.WriteMessageBegin("UpdateExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UpdateExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorDeleteExperiment struct {
  handler DbManager
}

func (p *dbManagerProcessorDeleteExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerDeleteExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerDeleteExperimentResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteExperiment(ctx, args.ExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteExperiment: " + err2.Error())
    oprot.WriteMessageBegin("DeleteExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("DeleteExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorCreateTrial struct {
  handler DbManager
}

func (p *dbManagerProcessorCreateTrial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerCreateTrialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerCreateTrialResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.CreateTrial(ctx, args.ExperimentId, args.TrialNo, args.TrialName); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateTrial: " + err2.Error())
    oprot.WriteMessageBegin("CreateTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CreateTrial", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorSuspendTrial struct {
  handler DbManager
}

func (p *dbManagerProcessorSuspendTrial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerSuspendTrialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SuspendTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerSuspendTrialResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SuspendTrial(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SuspendTrial: " + err2.Error())
    oprot.WriteMessageBegin("SuspendTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SuspendTrial", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorResumeTrial struct {
  handler DbManager
}

func (p *dbManagerProcessorResumeTrial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerResumeTrialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResumeTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerResumeTrialResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ResumeTrial(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResumeTrial: " + err2.Error())
    oprot.WriteMessageBegin("ResumeTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ResumeTrial", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorDeleteTrial struct {
  handler DbManager
}

func (p *dbManagerProcessorDeleteTrial) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerDeleteTrialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerDeleteTrialResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteTrial(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteTrial: " + err2.Error())
    oprot.WriteMessageBegin("DeleteTrial", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("DeleteTrial", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorUpdateTrialStatus struct {
  handler DbManager
}

func (p *dbManagerProcessorUpdateTrialStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerUpdateTrialStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateTrialStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerUpdateTrialStatusResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateTrialStatus(ctx, args.Trial); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTrialStatus: " + err2.Error())
    oprot.WriteMessageBegin("UpdateTrialStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("UpdateTrialStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorCreateInfer struct {
  handler DbManager
}

func (p *dbManagerProcessorCreateInfer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerCreateInferArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerCreateInferResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.CreateInfer(ctx, args.Infer); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateInfer: " + err2.Error())
    oprot.WriteMessageBegin("CreateInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CreateInfer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorSuspendInfer struct {
  handler DbManager
}

func (p *dbManagerProcessorSuspendInfer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerSuspendInferArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SuspendInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerSuspendInferResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SuspendInfer(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SuspendInfer: " + err2.Error())
    oprot.WriteMessageBegin("SuspendInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("SuspendInfer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorResumeInfer struct {
  handler DbManager
}

func (p *dbManagerProcessorResumeInfer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerResumeInferArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResumeInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerResumeInferResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ResumeInfer(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResumeInfer: " + err2.Error())
    oprot.WriteMessageBegin("ResumeInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ResumeInfer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dbManagerProcessorDeleteInfer struct {
  handler DbManager
}

func (p *dbManagerProcessorDeleteInfer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DbManagerDeleteInferArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DbManagerDeleteInferResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteInfer(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *ManagerException:
  result.Err = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteInfer: " + err2.Error())
    oprot.WriteMessageBegin("DeleteInfer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("DeleteInfer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Experiment
type DbManagerCreateExperimentArgs struct {
  Experiment *ExperimentAddDto `thrift:"experiment,1" db:"experiment" json:"experiment"`
}

func NewDbManagerCreateExperimentArgs() *DbManagerCreateExperimentArgs {
  return &DbManagerCreateExperimentArgs{}
}

var DbManagerCreateExperimentArgs_Experiment_DEFAULT *ExperimentAddDto
func (p *DbManagerCreateExperimentArgs) GetExperiment() *ExperimentAddDto {
  if !p.IsSetExperiment() {
    return DbManagerCreateExperimentArgs_Experiment_DEFAULT
  }
return p.Experiment
}
func (p *DbManagerCreateExperimentArgs) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *DbManagerCreateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Experiment = &ExperimentAddDto{}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *DbManagerCreateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experiment: ", p), err) }
  return err
}

func (p *DbManagerCreateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerCreateExperimentResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerCreateExperimentResult() *DbManagerCreateExperimentResult {
  return &DbManagerCreateExperimentResult{}
}

var DbManagerCreateExperimentResult_Success_DEFAULT int64
func (p *DbManagerCreateExperimentResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return DbManagerCreateExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerCreateExperimentResult_Err_DEFAULT *ManagerException
func (p *DbManagerCreateExperimentResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerCreateExperimentResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerCreateExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerCreateExperimentResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerCreateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerCreateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerCreateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateExperimentResult(%+v)", *p)
}

// Attributes:
//  - Experiment
type DbManagerUpdateExperimentArgs struct {
  Experiment *ExperimentEditDto `thrift:"experiment,1" db:"experiment" json:"experiment"`
}

func NewDbManagerUpdateExperimentArgs() *DbManagerUpdateExperimentArgs {
  return &DbManagerUpdateExperimentArgs{}
}

var DbManagerUpdateExperimentArgs_Experiment_DEFAULT *ExperimentEditDto
func (p *DbManagerUpdateExperimentArgs) GetExperiment() *ExperimentEditDto {
  if !p.IsSetExperiment() {
    return DbManagerUpdateExperimentArgs_Experiment_DEFAULT
  }
return p.Experiment
}
func (p *DbManagerUpdateExperimentArgs) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *DbManagerUpdateExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerUpdateExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Experiment = &ExperimentEditDto{}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *DbManagerUpdateExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerUpdateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experiment: ", p), err) }
  return err
}

func (p *DbManagerUpdateExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerUpdateExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerUpdateExperimentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerUpdateExperimentResult() *DbManagerUpdateExperimentResult {
  return &DbManagerUpdateExperimentResult{}
}

var DbManagerUpdateExperimentResult_Success_DEFAULT bool
func (p *DbManagerUpdateExperimentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerUpdateExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerUpdateExperimentResult_Err_DEFAULT *ManagerException
func (p *DbManagerUpdateExperimentResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerUpdateExperimentResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerUpdateExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerUpdateExperimentResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerUpdateExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerUpdateExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerUpdateExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerUpdateExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerUpdateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerUpdateExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerUpdateExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerUpdateExperimentResult(%+v)", *p)
}

// Attributes:
//  - ExperimentId
type DbManagerDeleteExperimentArgs struct {
  ExperimentId int64 `thrift:"experimentId,1" db:"experimentId" json:"experimentId"`
}

func NewDbManagerDeleteExperimentArgs() *DbManagerDeleteExperimentArgs {
  return &DbManagerDeleteExperimentArgs{}
}


func (p *DbManagerDeleteExperimentArgs) GetExperimentId() int64 {
  return p.ExperimentId
}
func (p *DbManagerDeleteExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *DbManagerDeleteExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *DbManagerDeleteExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerDeleteExperimentResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerDeleteExperimentResult() *DbManagerDeleteExperimentResult {
  return &DbManagerDeleteExperimentResult{}
}

var DbManagerDeleteExperimentResult_Success_DEFAULT bool
func (p *DbManagerDeleteExperimentResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerDeleteExperimentResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerDeleteExperimentResult_Err_DEFAULT *ManagerException
func (p *DbManagerDeleteExperimentResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerDeleteExperimentResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerDeleteExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerDeleteExperimentResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerDeleteExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerDeleteExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerDeleteExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteExperimentResult(%+v)", *p)
}

// Attributes:
//  - ExperimentId
//  - TrialNo
//  - TrialName
type DbManagerCreateTrialArgs struct {
  ExperimentId int64 `thrift:"experimentId,1" db:"experimentId" json:"experimentId"`
  TrialNo int32 `thrift:"trialNo,2" db:"trialNo" json:"trialNo"`
  TrialName string `thrift:"trialName,3" db:"trialName" json:"trialName"`
}

func NewDbManagerCreateTrialArgs() *DbManagerCreateTrialArgs {
  return &DbManagerCreateTrialArgs{}
}


func (p *DbManagerCreateTrialArgs) GetExperimentId() int64 {
  return p.ExperimentId
}

func (p *DbManagerCreateTrialArgs) GetTrialNo() int32 {
  return p.TrialNo
}

func (p *DbManagerCreateTrialArgs) GetTrialName() string {
  return p.TrialName
}
func (p *DbManagerCreateTrialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateTrialArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *DbManagerCreateTrialArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrialNo = v
}
  return nil
}

func (p *DbManagerCreateTrialArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TrialName = v
}
  return nil
}

func (p *DbManagerCreateTrialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateTrial_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateTrialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *DbManagerCreateTrialArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trialNo", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trialNo: ", p), err) }
  if err := oprot.WriteI32(int32(p.TrialNo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trialNo (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trialNo: ", p), err) }
  return err
}

func (p *DbManagerCreateTrialArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trialName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trialName: ", p), err) }
  if err := oprot.WriteString(string(p.TrialName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trialName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trialName: ", p), err) }
  return err
}

func (p *DbManagerCreateTrialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateTrialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerCreateTrialResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerCreateTrialResult() *DbManagerCreateTrialResult {
  return &DbManagerCreateTrialResult{}
}

var DbManagerCreateTrialResult_Success_DEFAULT int64
func (p *DbManagerCreateTrialResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return DbManagerCreateTrialResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerCreateTrialResult_Err_DEFAULT *ManagerException
func (p *DbManagerCreateTrialResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerCreateTrialResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerCreateTrialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerCreateTrialResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerCreateTrialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateTrialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerCreateTrialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerCreateTrialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateTrial_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateTrialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateTrialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateTrialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateTrialResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerSuspendTrialArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerSuspendTrialArgs() *DbManagerSuspendTrialArgs {
  return &DbManagerSuspendTrialArgs{}
}


func (p *DbManagerSuspendTrialArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerSuspendTrialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerSuspendTrialArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerSuspendTrialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuspendTrial_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerSuspendTrialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerSuspendTrialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerSuspendTrialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerSuspendTrialResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerSuspendTrialResult() *DbManagerSuspendTrialResult {
  return &DbManagerSuspendTrialResult{}
}

var DbManagerSuspendTrialResult_Success_DEFAULT bool
func (p *DbManagerSuspendTrialResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerSuspendTrialResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerSuspendTrialResult_Err_DEFAULT *ManagerException
func (p *DbManagerSuspendTrialResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerSuspendTrialResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerSuspendTrialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerSuspendTrialResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerSuspendTrialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerSuspendTrialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerSuspendTrialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerSuspendTrialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuspendTrial_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerSuspendTrialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerSuspendTrialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerSuspendTrialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerSuspendTrialResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerResumeTrialArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerResumeTrialArgs() *DbManagerResumeTrialArgs {
  return &DbManagerResumeTrialArgs{}
}


func (p *DbManagerResumeTrialArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerResumeTrialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerResumeTrialArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerResumeTrialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResumeTrial_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerResumeTrialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerResumeTrialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerResumeTrialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerResumeTrialResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerResumeTrialResult() *DbManagerResumeTrialResult {
  return &DbManagerResumeTrialResult{}
}

var DbManagerResumeTrialResult_Success_DEFAULT bool
func (p *DbManagerResumeTrialResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerResumeTrialResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerResumeTrialResult_Err_DEFAULT *ManagerException
func (p *DbManagerResumeTrialResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerResumeTrialResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerResumeTrialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerResumeTrialResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerResumeTrialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerResumeTrialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerResumeTrialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerResumeTrialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResumeTrial_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerResumeTrialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerResumeTrialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerResumeTrialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerResumeTrialResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerDeleteTrialArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerDeleteTrialArgs() *DbManagerDeleteTrialArgs {
  return &DbManagerDeleteTrialArgs{}
}


func (p *DbManagerDeleteTrialArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerDeleteTrialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteTrialArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerDeleteTrialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteTrial_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteTrialArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerDeleteTrialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteTrialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerDeleteTrialResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerDeleteTrialResult() *DbManagerDeleteTrialResult {
  return &DbManagerDeleteTrialResult{}
}

var DbManagerDeleteTrialResult_Success_DEFAULT bool
func (p *DbManagerDeleteTrialResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerDeleteTrialResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerDeleteTrialResult_Err_DEFAULT *ManagerException
func (p *DbManagerDeleteTrialResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerDeleteTrialResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerDeleteTrialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerDeleteTrialResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerDeleteTrialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteTrialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerDeleteTrialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerDeleteTrialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteTrial_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteTrialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteTrialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteTrialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteTrialResult(%+v)", *p)
}

// Attributes:
//  - Trial
type DbManagerUpdateTrialStatusArgs struct {
  Trial *TrialEditDto `thrift:"trial,1" db:"trial" json:"trial"`
}

func NewDbManagerUpdateTrialStatusArgs() *DbManagerUpdateTrialStatusArgs {
  return &DbManagerUpdateTrialStatusArgs{}
}

var DbManagerUpdateTrialStatusArgs_Trial_DEFAULT *TrialEditDto
func (p *DbManagerUpdateTrialStatusArgs) GetTrial() *TrialEditDto {
  if !p.IsSetTrial() {
    return DbManagerUpdateTrialStatusArgs_Trial_DEFAULT
  }
return p.Trial
}
func (p *DbManagerUpdateTrialStatusArgs) IsSetTrial() bool {
  return p.Trial != nil
}

func (p *DbManagerUpdateTrialStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerUpdateTrialStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Trial = &TrialEditDto{}
  if err := p.Trial.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Trial), err)
  }
  return nil
}

func (p *DbManagerUpdateTrialStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateTrialStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerUpdateTrialStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trial", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trial: ", p), err) }
  if err := p.Trial.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Trial), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trial: ", p), err) }
  return err
}

func (p *DbManagerUpdateTrialStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerUpdateTrialStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerUpdateTrialStatusResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerUpdateTrialStatusResult() *DbManagerUpdateTrialStatusResult {
  return &DbManagerUpdateTrialStatusResult{}
}

var DbManagerUpdateTrialStatusResult_Success_DEFAULT bool
func (p *DbManagerUpdateTrialStatusResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerUpdateTrialStatusResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerUpdateTrialStatusResult_Err_DEFAULT *ManagerException
func (p *DbManagerUpdateTrialStatusResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerUpdateTrialStatusResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerUpdateTrialStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerUpdateTrialStatusResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerUpdateTrialStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerUpdateTrialStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerUpdateTrialStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerUpdateTrialStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateTrialStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerUpdateTrialStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerUpdateTrialStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerUpdateTrialStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerUpdateTrialStatusResult(%+v)", *p)
}

// Attributes:
//  - Infer
type DbManagerCreateInferArgs struct {
  Infer *InferAddDto `thrift:"infer,1" db:"infer" json:"infer"`
}

func NewDbManagerCreateInferArgs() *DbManagerCreateInferArgs {
  return &DbManagerCreateInferArgs{}
}

var DbManagerCreateInferArgs_Infer_DEFAULT *InferAddDto
func (p *DbManagerCreateInferArgs) GetInfer() *InferAddDto {
  if !p.IsSetInfer() {
    return DbManagerCreateInferArgs_Infer_DEFAULT
  }
return p.Infer
}
func (p *DbManagerCreateInferArgs) IsSetInfer() bool {
  return p.Infer != nil
}

func (p *DbManagerCreateInferArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateInferArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Infer = &InferAddDto{}
  if err := p.Infer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Infer), err)
  }
  return nil
}

func (p *DbManagerCreateInferArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateInfer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateInferArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("infer", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:infer: ", p), err) }
  if err := p.Infer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Infer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:infer: ", p), err) }
  return err
}

func (p *DbManagerCreateInferArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateInferArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerCreateInferResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerCreateInferResult() *DbManagerCreateInferResult {
  return &DbManagerCreateInferResult{}
}

var DbManagerCreateInferResult_Success_DEFAULT int64
func (p *DbManagerCreateInferResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return DbManagerCreateInferResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerCreateInferResult_Err_DEFAULT *ManagerException
func (p *DbManagerCreateInferResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerCreateInferResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerCreateInferResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerCreateInferResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerCreateInferResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerCreateInferResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerCreateInferResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerCreateInferResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateInfer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerCreateInferResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateInferResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerCreateInferResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerCreateInferResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerSuspendInferArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerSuspendInferArgs() *DbManagerSuspendInferArgs {
  return &DbManagerSuspendInferArgs{}
}


func (p *DbManagerSuspendInferArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerSuspendInferArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerSuspendInferArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerSuspendInferArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuspendInfer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerSuspendInferArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerSuspendInferArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerSuspendInferArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerSuspendInferResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerSuspendInferResult() *DbManagerSuspendInferResult {
  return &DbManagerSuspendInferResult{}
}

var DbManagerSuspendInferResult_Success_DEFAULT bool
func (p *DbManagerSuspendInferResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerSuspendInferResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerSuspendInferResult_Err_DEFAULT *ManagerException
func (p *DbManagerSuspendInferResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerSuspendInferResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerSuspendInferResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerSuspendInferResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerSuspendInferResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerSuspendInferResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerSuspendInferResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerSuspendInferResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SuspendInfer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerSuspendInferResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerSuspendInferResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerSuspendInferResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerSuspendInferResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerResumeInferArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerResumeInferArgs() *DbManagerResumeInferArgs {
  return &DbManagerResumeInferArgs{}
}


func (p *DbManagerResumeInferArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerResumeInferArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerResumeInferArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerResumeInferArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResumeInfer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerResumeInferArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerResumeInferArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerResumeInferArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerResumeInferResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerResumeInferResult() *DbManagerResumeInferResult {
  return &DbManagerResumeInferResult{}
}

var DbManagerResumeInferResult_Success_DEFAULT bool
func (p *DbManagerResumeInferResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerResumeInferResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerResumeInferResult_Err_DEFAULT *ManagerException
func (p *DbManagerResumeInferResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerResumeInferResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerResumeInferResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerResumeInferResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerResumeInferResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerResumeInferResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerResumeInferResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerResumeInferResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResumeInfer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerResumeInferResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerResumeInferResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerResumeInferResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerResumeInferResult(%+v)", *p)
}

// Attributes:
//  - ID
type DbManagerDeleteInferArgs struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewDbManagerDeleteInferArgs() *DbManagerDeleteInferArgs {
  return &DbManagerDeleteInferArgs{}
}


func (p *DbManagerDeleteInferArgs) GetID() int64 {
  return p.ID
}
func (p *DbManagerDeleteInferArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteInferArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DbManagerDeleteInferArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteInfer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteInferArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DbManagerDeleteInferArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteInferArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Err
type DbManagerDeleteInferResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Err *ManagerException `thrift:"err,1" db:"err" json:"err,omitempty"`
}

func NewDbManagerDeleteInferResult() *DbManagerDeleteInferResult {
  return &DbManagerDeleteInferResult{}
}

var DbManagerDeleteInferResult_Success_DEFAULT bool
func (p *DbManagerDeleteInferResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DbManagerDeleteInferResult_Success_DEFAULT
  }
return *p.Success
}
var DbManagerDeleteInferResult_Err_DEFAULT *ManagerException
func (p *DbManagerDeleteInferResult) GetErr() *ManagerException {
  if !p.IsSetErr() {
    return DbManagerDeleteInferResult_Err_DEFAULT
  }
return p.Err
}
func (p *DbManagerDeleteInferResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DbManagerDeleteInferResult) IsSetErr() bool {
  return p.Err != nil
}

func (p *DbManagerDeleteInferResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DbManagerDeleteInferResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DbManagerDeleteInferResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Err = &ManagerException{}
  if err := p.Err.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DbManagerDeleteInferResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteInfer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DbManagerDeleteInferResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteInferResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
    if err := p.Err.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  }
  return err
}

func (p *DbManagerDeleteInferResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DbManagerDeleteInferResult(%+v)", *p)
}


